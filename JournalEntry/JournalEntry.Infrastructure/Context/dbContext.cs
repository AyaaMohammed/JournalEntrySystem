// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using JournalEntry.Data.Models;
namespace JournalEntry.Infrastructure.Models;

public partial class dbContext : DbContext
{
    public dbContext()
    {
    }

    public dbContext(DbContextOptions<dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountsChart> AccountsCharts { get; set; }

    public virtual DbSet<JournalDetail> JournalDetails { get; set; }

    public virtual DbSet<JournalHeader> JournalHeaders { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=fCarePlus;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccountsChart>(entity =>
        {
            entity.HasKey(e => e.ID)
                .HasName("PK__Accounts__3214EC2748817F42")
                .HasAnnotation("SqlServer:FillFactor", 90);

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<JournalDetail>(entity =>
        {
            entity.Property(e => e.DetailID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Account).WithMany(p => p.JournalDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JournalDetails_Account");

            entity.HasOne(d => d.Journal).WithMany(p => p.JournalDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JournalDetails_Header");
        });

        modelBuilder.Entity<JournalHeader>(entity =>
        {
            entity.Property(e => e.JournalID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Creation_Date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.EntryNo).ValueGeneratedOnAdd();

            entity.HasOne(d => d.User).WithMany(p => p.JournalHeaders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JournalHeader_Users");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}